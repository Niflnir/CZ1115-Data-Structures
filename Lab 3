Question 1

#include <stdio.h>
#include <stdlib.h>

typedef struct _listnode{
    int item;
    struct _listnode *next;
} ListNode;

void printList(ListNode *cur);
ListNode * findNode(ListNode *cur, int index);
int insertNode(ListNode **ptrHead, int index, int item);

int removeNode(ListNode **ptrHead,int index);

int main()
{
    ListNode *head=NULL;
    int size =0;
    int item;
    int index;

    printf("Enter a list of numbers, terminated by any non-digit character: \n");
    while(scanf("%d",&item))
        if(insertNode(&head,size, item)) size++;
    scanf("%*s");

    printList(head);

    while(1){
        printf("Enter the index of the node to be removed: ");
        scanf("%d",&index);

        if(removeNode(&head,index))
            size--;
        else{
            printf("The node cannot be removed.\n");
            break;
        }

        printf("After the removal operation,\n");
        printList(head);
    }

    printList(head);
    return 0;
}

void printList(ListNode *cur){
    printf("Current List: ");
    while (cur != NULL){
        printf("%d ", cur->item);
        cur = cur->next;
    }
    printf("\n");
}

ListNode *findNode(ListNode* cur, int index)
{
   if (cur==NULL || index<0)
      return NULL;
   while(index>0){
      cur=cur->next;
      if (cur==NULL)
         return NULL;
      index--;
   }
   return cur;
}

int insertNode(ListNode **ptrHead, int index, int item){
    ListNode  *pre, *newNode;
    // If empty list or inserting first node, update head pointer
    if (index == 0){
        newNode = malloc(sizeof(ListNode));
        newNode->item = item;
        newNode->next = *ptrHead;
        *ptrHead = newNode;
        return 1;
    }
    // Find the nodes before and at the target position
    // Create a new node and reconnect the links
    else if ((pre = findNode(*ptrHead, index-1)) != NULL){
        newNode = malloc(sizeof(ListNode));
        newNode->item = item;
        newNode->next = pre->next;
        pre->next = newNode;
        return 1;
    }
    return 0;
}

int removeNode(ListNode **ptrHead,int index)
{ 
   // If linked list is empty 
   if (*ptrHead == NULL) 
      return 0; 
  
   // Store head node 
   ListNode* temp = *ptrHead; 
  
    // If head needs to be removed 
    if (index == 0) 
    { 
        *ptrHead = temp->next;   // Change head 
        free(temp);               // free old head 
        return 1; 
    } 
  
    // Find previous node of the node to be deleted 
    for (int i=0; temp!=NULL && i<index-1; i++) 
         temp = temp->next; 
  
    // If position is more than number of nodes 
    if (temp == NULL || temp->next == NULL) 
         return 0 ; 
  
    // Node temp->next is the node to be deleted 
    // Store pointer to the next of node to be deleted 
    ListNode *next = temp->next->next; 
  
    // Unlink the node from linked list 
    free(temp->next);  // Free memory 
    temp->next = next;  // Unlink the deleted node from list                
    return 1;   
    }
    
    
    
Question 2

#include <stdio.h>
#include <stdlib.h>

typedef struct _listnode{
    int item;
    struct _listnode *next;
} ListNode;


void printList(ListNode *cur);
ListNode * findNode(ListNode *cur, int index);
int insertNode(ListNode **ptrHead, int index, int item);
void deleteList(ListNode **ptrHead);

int split(ListNode *cur,ListNode **ptrEvenList,ListNode **ptrOddList);

int main()
{
    ListNode *head=NULL;
    ListNode *oddHead = NULL;
    ListNode *evenHead = NULL;

    int size =0;
    int item;

    printf("Enter a list of numbers, terminated by any non-digit character: \n");
    while(scanf("%d",&item))
        if(insertNode(&head,size, item)) size++;
    scanf("%*s");

    printf("\nBefore split() is called:\n");
    printf("The original list:\n");
    printList(head);

    split(head, &evenHead, &oddHead);

    printf("\nAfter split() was called:\n");
    printf("The original list:\n");
    printList(head);
	printf("The even list:\n");
	printList(evenHead);
	printf("The odd list:\n");
	printList(oddHead);

	if(head!=NULL)
       deleteList(&head);
    if(oddHead!=NULL)
       deleteList(&oddHead);
    if(evenHead!=NULL)
       deleteList(&evenHead);
    return 0;
}

void printList(ListNode *cur){
    printf("Current List: ");
    while (cur != NULL){
        printf("%d ", cur->item);
        cur = cur->next;
    }
    printf("\n");
}

ListNode *findNode(ListNode* cur, int index)
{
   if (cur==NULL || index<0)
      return NULL;
   while(index>0){
      cur=cur->next;
      if (cur==NULL)
         return NULL;
      index--;
   }
   return cur;
}

int insertNode(ListNode **ptrHead, int index, int item){
    ListNode  *pre, *newNode;
    // If empty list or inserting first node, update head pointer
    if (index == 0){
        newNode = malloc(sizeof(ListNode));
        newNode->item = item;
        newNode->next = *ptrHead;
        *ptrHead = newNode;
        return 1;
    }
    // Find the nodes before and at the target position
    // Create a new node and reconnect the links
    else if ((pre = findNode(*ptrHead, index-1)) != NULL){
        newNode = malloc(sizeof(ListNode));
        newNode->item = item;
        newNode->next = pre->next;
        pre->next = newNode;
        return 1;
    }
    return 0;
}

void deleteList(ListNode **ptrHead){
    ListNode *cur = *ptrHead;
    ListNode *temp;
    while (cur!= NULL) {
		temp=cur->next;
		free(cur);
		cur=temp;
	}
	*ptrHead=NULL;
}

int split(ListNode *cur, ListNode **ptrEvenList,ListNode **ptrOddList)
{
    int count;
    *ptrEvenList = NULL;
    *ptrOddList = NULL;
    ListNode *temp = cur;
   
    while (temp != NULL){
        
        if(count%2 == 0){
            ListNode *new_node = malloc(sizeof(ListNode));
            new_node->item = temp->item;
            new_node->next = *ptrOddList;
            *ptrOddList = new_node;
            
        }
        else{
            ListNode *new_node = malloc(sizeof(ListNode));
            new_node->item = temp->item;
            new_node->next = *ptrEvenList;
            *ptrEvenList = new_node;
        }
        temp = temp->next;
        
    ListNode* prevEven = NULL;
    ListNode* currentEven = *ptrEvenList;
    ListNode* nextEven = NULL;
    while (currentEven != NULL) {
        // Store next
        nextEven = currentEven->next;
 
        // Reverse current node's pointer
        currentEven->next = prevEven;
 
        // Move pointers one position ahead.
        prevEven = currentEven;
        currentEven = nextEven;
    }
    *ptrEvenList = prevEven;
    
    ListNode* prevOdd = NULL;
    ListNode* currentOdd = *ptrOddList;
    ListNode* nextOdd = NULL;
    while (currentOdd != NULL) {
        // Store next
        nextOdd = currentOdd->next;
 
        // Reverse current node's pointer
        currentOdd->next = prevOdd;
 
        // Move pointers one position ahead.
        prevOdd = currentOdd;
        currentOdd = nextOdd;
    }
    *ptrOddList = prevOdd;


        
        count++;
        
    }
    
    return 0;
}
